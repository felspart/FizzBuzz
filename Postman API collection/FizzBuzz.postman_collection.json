{
	"info": {
		"_postman_id": "197f4eb1-aa4f-422d-9aef-eb1bf10ca4d2",
		"name": "FizzBuzz",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Testing FizzBuzz API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const lo = require('lodash');\r",
							"\r",
							"var resp = pm.response.json();\r",
							"\r",
							"for (i = 0 ; i < resp.length ; i++){\r",
							"\r",
							"    if(lo.isInteger(parseInt(resp[i].input))){\r",
							"\r",
							"\r",
							"    if (parseInt(resp[i].input) % 3 == 0 && parseInt(resp[i].input) % 5 != 0){\r",
							"        pm.test(\"Testing for Multiple of 3 where input = \" + resp[i].input,() => {\r",
							"            pm.expect(resp[i].output).to.eql(\"Fizz\");\r",
							"\r",
							"        })\r",
							"    }\r",
							"    else if (parseInt(resp[i].input) % 5 == 0 && parseInt(resp[i].input) % 3 != 0){\r",
							"        pm.test(\"Testing for Multiple of 5 where input = \" + resp[i].input,() => {\r",
							"            pm.expect(resp[i].output).to.eql(\"Buzz\");\r",
							"\r",
							"        })\r",
							"    }\r",
							"    else if (parseInt(resp[i].input) % 3 == 0 && parseInt(resp[i].input) % 5 == 0){\r",
							"        pm.test(\"Testing for Multiple of 3 and 5 where input = \" + resp[i].input,() => {\r",
							"            pm.expect(resp[i].output).to.eql(\"FizzBuzz\");\r",
							"\r",
							"        })\r",
							"    }\r",
							"    else if (parseInt(resp[i].input) % 3 != 0 && parseInt(resp[i].input) % 5 != 0){\r",
							"        pm.test(\"Testing for Non Multiple of 3 and 5 where input = \" + resp[i].input,() => {\r",
							"            pm.expect(resp[i].outputs[1].output).to.eql(parseFloat(resp[i].outputs[1].output)/3);\r",
							"            pm.expect(resp[i].outputs[1].output).to.eql(parseFloat(resp[i].outputs[1].output)/5);\r",
							"\r",
							"        })\r",
							"    }\r",
							"\r",
							"    }\r",
							"    else {\r",
							"        pm.test(\"Testing for non numeric output where input = \" + resp[i].input,() => {\r",
							"            pm.expect(resp[i].output).to.eql(\"Invalid Item\");\r",
							"\r",
							"        })\r",
							"    }\r",
							"    \r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "TBD/:TBD",
					"host": [
						"TBD"
					],
					"path": [
						":TBD"
					],
					"variable": [
						{
							"key": "TBD",
							"value": "1,3,5,a,15,23,b,abc"
						}
					]
				}
			},
			"response": []
		}
	]
}